{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","calculate.js","App.js","serviceWorker.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","className","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","styles","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","result","count","lines","length","a","b","c","j","calculateWinner","boardCopy","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6LAEA,IAAMA,EAAQ,CACVC,WAAY,UACZC,OAAQ,kBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QASEC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACX,4BAAQC,UAAU,SAASV,MAAOA,EAAOS,QAASA,GAC7CD,ICVHR,EAAQ,CACVW,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAWHC,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAST,EAAZ,EAAYA,QAAZ,OACV,yBAAKT,MAAOA,GACPkB,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACT,kBAAC,EAAD,CAAQC,IAAKD,EAAGb,MAAOY,EAAQX,QAAS,kBAAMA,EAAQY,WCX5DE,EAAS,CACXX,MAAO,QACPE,OAAQ,aAsCGU,EAnCF,WAAO,IAAD,EACWC,mBAASC,MAAM,GAAGC,KAAK,OADlC,mBACRC,EADQ,KACDC,EADC,OAEeJ,oBAAS,GAFxB,mBAERK,EAFQ,KAECC,EAFD,KAGTC,ECZH,SAAyBd,EAASe,GAWrC,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFb,EAAI,EAAGA,EAAIa,EAAMC,OAAQd,IAAK,CAAC,IAAD,cACjBa,EAAMb,GADW,GAC5Be,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GAClE,OAAOpB,EAAQkB,GAGvB,IAAK,IAAIG,EAAI,EAAGA,EAAIrB,EAAQiB,OAAQI,IAChC,GAAkB,MAAdrB,EAAQqB,GACR,OAGR,MAAO,ODVQC,CAAgBZ,GAqB/B,OACI,oCAAE,yBAAKlB,UAAU,qBACb,kBAAC,EAAD,CAAOQ,QAASU,EAAOnB,QArBX,SAAAY,GAChB,IAAMoB,EAAS,YAAOb,GAClBI,GAAUS,EAAUpB,KACxBoB,EAAUpB,GAAKS,EAAU,IAAM,IAC/BD,EAASY,GACTV,GAAYD,OAiBR,yBAAK9B,MAAOuB,GACR,uBAAGvB,MAAO,CAAE0C,UAAW,SAAUvC,SAAU,KAAiB,QAAV6B,EAAmB,aAAeA,EAAS,WAAaA,EAAS,iBAAmBF,EAAU,IAAM,MAV9J,4BAAQpB,UAAU,SAASD,QAAS,kBAAMoB,EAASH,MAAM,GAAGC,KAAK,SAAjE,kBEtBOgB,EAFH,kBAAM,6BAAK,yBAAK3C,MAAO,CAAEc,OAAQ,GAAIX,SAAU,GAAIuC,UAAW,WAAnD,eAAgF,kBAAC,EAAD,QCSnFE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eba24d84.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n    background: '#2196F3',\n    border: '2px solid black',\n    fontSize: '40px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none'\n};\n\nconst Square = ({ value, onClick }) => (\n    <button className=\"button\" style={style} onClick={onClick}>\n        {value}\n    </button>\n);\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nconst style = {\n    borderRadius: '10px',\n    width: '500px',\n    height: '500px',\n    margin: '0 auto',\n    display: 'grid',\n    gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\n};\n\nconst Board = ({ squares, onClick }) => (\n    <div style={style}>\n        {squares.map((square, i) => (\n            <Square key={i} value={square} onClick={() => onClick(i)} />\n        ))}\n    </div>\n)\n\nexport default Board;","import React, { useState } from 'react';\nimport { calculateWinner } from '../calculate';\nimport Board from './Board';\n\nconst styles = {\n    width: '200px',\n    margin: '20px auto',\n};\n\nconst Game = () => {\n    const [board, setBoard] = useState(Array(9).fill(null));\n    const [xIsNext, setXisNext] = useState(true);\n    const result = calculateWinner(board);\n\n    const handleClick = i => {\n        const boardCopy = [...board];\n        if (result || boardCopy[i]) return;\n        boardCopy[i] = xIsNext ? 'X' : 'O';\n        setBoard(boardCopy);\n        setXisNext(!xIsNext);\n    }\n\n    const jumpTo = () => {\n\n    }\n\n    const renderMoves = () => (\n        <button className=\"button\" onClick={() => setBoard(Array(9).fill(null))}>\n            Start Game\n        </button>\n\n    )\n\n    return (\n        <><div className=\"tic-tac-toe-style\">\n            <Board squares={board} onClick={handleClick} />\n            <div style={styles}>\n                <p style={{ textAlign: 'center', fontSize: 20 }}>{result == \"Draw\" ? \"Match draw\" : result ? 'Winner: ' + result : 'Next Player: ' + (xIsNext ? 'X' : 'O')}</p>\n                {renderMoves()}\n            </div></div>\n        </>\n    )\n}\n\nexport default Game;","export function calculateWinner(squares, count) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    for (let j = 0; j < squares.length; j++) {\n        if (squares[j] == null) {\n            return;\n        }\n    }\n    return \"Draw\";\n}","import React from 'react';\nimport Game from './components/Game';\n\nconst App = () => <div><div style={{ margin: 60, fontSize: 30, textAlign: 'center' }}>Tic-Tac-Toe</div><Game /></div>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}